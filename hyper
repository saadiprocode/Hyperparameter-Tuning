import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import scipy.stats as stats

df = pd.read_csv('/synthetic_emails.csv')

df_sub = df.iloc[:100, :]
X = df_sub.drop(columns=['Email No.', 'spam'])
y = df_sub['spam']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=10000)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

acc = accuracy_score(y_test, y_pred)
prec = precision_score(y_test, y_pred)
rec = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
print(f'Model Performance (Default Hyperparameters):')
print(f'Accuracy: {acc:.4f}')
print(f'Precision: {prec:.4f}')
print(f'Recall: {rec:.4f}')
print(f'F1 Score: {f1:.4f}')
print()

print('Hyperparameter Tuning using Grid Search:')
param_grid = {
    'C': [0.1, 1, 10, 100],
    'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']
}

grid_search = GridSearchCV(LogisticRegression(max_iter=10000), param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

print(f'Best parameters (Grid Search): {grid_search.best_params_}')
print(f'Best score (Grid Search - CV Accuracy): {grid_search.best_score_:.4f}')
print()

best_model_grid = grid_search.best_estimator_
y_pred_grid = best_model_grid.predict(X_test)
acc_grid = accuracy_score(y_test, y_pred_grid)
prec_grid = precision_score(y_test, y_pred_grid)
rec_grid = recall_score(y_test, y_pred_grid)
f1_grid = f1_score(y_test, y_pred_grid)
print(f'Model Performance (Grid Search Tuned):')
print(f'Accuracy: {acc_grid:.4f}')
print(f'Precision: {prec_grid:.4f}')
print(f'Recall: {rec_grid:.4f}')
print(f'F1 Score: {f1_grid:.4f}')
print()

print('Hyperparameter Tuning using Random Search:')
param_dist = {
    'C': stats.loguniform(0.1, 100),
    'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']
}

random_search = RandomizedSearchCV(LogisticRegression(max_iter=10000), param_dist, n_iter=50, cv=5, scoring='accuracy', random_state=42)
random_search.fit(X_train, y_train)

print(f'Best parameters (Random Search): {random_search.best_params_}')
print(f'Best score (Random Search - CV Accuracy): {random_search.best_score_:.4f}')
print()

best_model_random = random_search.best_estimator_
y_pred_random = best_model_random.predict(X_test)
acc_random = accuracy_score(y_test, y_pred_random)
prec_random = precision_score(y_test, y_pred_random)
rec_random = recall_score(y_test, y_pred_random)
f1_random = f1_score(y_test, y_pred_random)
print(f'Model Performance (Random Search Tuned):')
print(f'Accuracy: {acc_random:.4f}')
print(f'Precision: {prec_random:.4f}')
print(f'Recall: {rec_random:.4f}')
print(f'F1 Score: {f1_random:.4f}')
